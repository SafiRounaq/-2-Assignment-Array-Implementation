#include <iostream>
#include <vector>

class SparseMatrix {
private:
    int rows, cols;
    struct Triplet {
        int value; // The value at (row, col)
        int row;   // Row index of the element
        int col;   // Column index of the element
    };

    std::vector<Triplet> elements; // Stores non-zero elements as triplets

public:
    // Constructor to initialize the matrix dimensions
    SparseMatrix(int rows, int cols) {
        if (rows <= 0 || cols <= 0) {
            throw std::invalid_argument("Matrix dimensions must be positive.");
        }
        this->rows = rows;
        this->cols = cols;
    }

    // Add a non-zero element at a specific position (row, col)
    void addValue(int value, int row, int col) {
        if (row >= rows || col >= cols || row < 0 || col < 0) {
            throw std::out_of_range("Invalid row or column index.");
        }
        if (value != 0) {
            // Add the non-zero element as a triplet (value, row, col)
            elements.push_back({value, row, col});
        }
    }

    // Display the matrix (full view with zeros included)
    void display() {
        // Create a 2D matrix initialized to zero
        std::vector<std::vector<int>> matrix(rows, std::vector<int>(cols, 0));

        // Place the non-zero values into the matrix
        for (const auto& triplet : elements) {
            matrix[triplet.row][triplet.col] = triplet.value;
        }

        // Print the matrix
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                std::cout << matrix[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }

    // Optional: Add two sparse matrices (if they are of the same dimensions)
    SparseMatrix add(SparseMatrix& other) {
        if (this->rows != other.rows || this->cols != other.cols) {
            throw std::invalid_argument("Matrix dimensions must be the same for addition.");
        }

        SparseMatrix result(this->rows, this->cols);

        // Add elements from the first matrix
        for (const auto& triplet : elements) {
            result.addValue(triplet.value, triplet.row, triplet.col);
        }

        // Add elements from the second matrix
        for (const auto& triplet : other.elements) {
            result.addValue(triplet.value, triplet.row, triplet.col);
        }

        return result;
    }
};

// Main function to test the SparseMatrix class
int main() {
    try {
        SparseMatrix matrix1(4, 4);

        // Adding non-zero elements to the matrix
        matrix1.addValue(5, 0, 0);
        matrix1.addValue(8, 1, 2);
        matrix1.addValue(7, 3, 3);
        matrix1.addValue(3, 2, 1);

        std::cout << "Matrix 1 (4x4):\n";
        matrix1.display();
        std::cout << std::endl;

        SparseMatrix matrix2(4, 4);
        matrix2.addValue(2, 0, 1);
        matrix2.addValue(6, 2, 2);
        matrix2.addValue(4, 3, 0);

        std::cout << "Matrix 2 (4x4):\n";
        matrix2.display();
        std::cout << std::endl;

        // Adding matrix1 and matrix2
        SparseMatrix result = matrix1.add(matrix2);

        std::cout << "Resultant Matrix (Matrix1 + Matrix2):\n";
        result.display();
        std::cout << std::endl;

    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}
